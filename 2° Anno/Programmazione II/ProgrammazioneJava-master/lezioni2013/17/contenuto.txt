Un albero binario è una struttura dati ricorsiva formata da un nodo
contenente un valore e da due eventuali sottoalberi binari. In Java un
albero binario per valori di tipo intero si può definire con la classe

public class BinaryTree {
  private int value;
  private BinaryTree left;
  private BInaryTree right;
}

Quando il sottoalbero sinistro o quello destro (o entrambi) sono assenti,
si usa null al loro posto.

Si espanda la classe BinaryTree con i costruttori:

- public BinaryTree(int value)
  che costruisce l'albero binario con il valore indicato dentro la radice
  e con sottoalberi sinistro e destro vuoti

- public BinaryTree(int value, BinaryTree left, BinaryTree right)
  che costruisce l'albero binario con il valore indicato dentro la radice
  e con sottoalberi sinistro e destro indicati (eventualmente null)

Si aggiunga quindi un metodo

- public String toString()
  che restituisce una stringa che descrive l'albero con la radice posta
  a sinistra

Si scriva quindi una classe Main che crea e stampa il seguente albero:

      22
    3
      13
11
      -7
   -4
      

(la radice è 11, posta a sinistra; il sottoalbero sinistro ha -4 come radice
e il sottoalbero destro ha 3 come radice: il sottoalbero sinistro ha solo
sottoalbero destro ma non ha sottoalbero sinistro)

Si scrivano i metodi

- public int sum()
  che restituisce la somma dei valori presenti nell'intero albero

- public int max()
  che restituisce il massimo valore fra quelli presenti nell'albero

Si scriva una classe di testing con JUnit in modo da controllare alcune
esecuzioni di min() e max()

Infine (difficile!) si provi a scrivere un metodo di BinaryTree:

- public String toStringHorizontally()
  che restituisce una stringa che descrive l'albero con la radice in alto,
  come ad esempio:

              11
        -4           3
           -7     13   22
